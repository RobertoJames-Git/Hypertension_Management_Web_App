-- Drop all tables and procedure

DROP PROCEDURE ActivateUser;
DROP PROCEDURE AddWebUser;
DROP TABLE IF EXISTS support;
DROP TABLE IF EXISTS communicate;
DROP TABLE IF EXISTS monitor;
DROP TABLE IF EXISTS message;
DROP TABLE IF EXISTS reading;
DROP TABLE IF EXISTS patient;
DROP TABLE IF EXISTS family_member;
DROP TABLE IF EXISTS health_care_prof;
DROP TABLE IF EXISTS monitor_request;
DROP TABLE IF EXISTS web_users;

create table web_users(
	userID INT AUTO_INCREMENT,
    username varchar(10),
    fname varchar(50),
    lname varchar(50),
    gender enum('male','female','other','rather not say'),
    dob date,
    email varchar(200) Unique,
    token varchar(100) Unique,
    token_expiration datetime,
    account_status enum('pending','active'),
    password varchar(100),
    PRIMARY KEY(userID, username) 
);


CREATE TABLE monitor_request (
    request_id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id INT NOT NULL,
    sender_username VARCHAR(50) NOT NULL,
    role ENUM('Health care Professional', 'Patient', 'Family Member') NOT NULL,
    request_date DATETIME NOT NULL,
    request_status ENUM('pending', 'accepted', 'rejected') NOT NULL,
    recipient_info VARCHAR(255) NOT NULL,
    FOREIGN KEY (sender_id, sender_username) REFERENCES web_users(userid, username)
);

-- Create Family Member Table
CREATE TABLE family_member (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    education_level ENUM('No Formal Education','Elementary','Secondary','Some Tertiary','Vocational Training','Degree'),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Health Care Professional Table
CREATE TABLE health_care_prof (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    years_of_exp INT NOT NULL,
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Patient Table
CREATE TABLE patient (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    hyp_status enum('normal','high','low','critical'),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Reading Table
CREATE TABLE reading (
    reading_id VARCHAR(50) NOT NULL,
    readingdate DATE NOT NULL,
    systolic INT NOT NULL,
    diastolic INT NOT NULL,
    PRIMARY KEY (reading_id)
);

-- Create Message Table
CREATE TABLE message (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    healthcare_prof_userid INT NOT NULL,
    healthcare_prof_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    message_date DATETIME NOT NULL,
    message_content TEXT NOT NULL,
    FOREIGN KEY (healthcare_prof_userid, healthcare_prof_username) REFERENCES health_care_prof(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);

-- Create Monitor Table
CREATE TABLE monitor (
    monitor_id INT AUTO_INCREMENT PRIMARY KEY,
    healthcare_prof_userid INT NOT NULL,
    healthcare_prof_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    start_date DATETIME NOT NULL,
    end_date DATETIME NOT NULL,
    FOREIGN KEY (healthcare_prof_userid, healthcare_prof_username) REFERENCES health_care_prof(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);

-- Create Communicate Table
CREATE TABLE communicate (
    communicate_id INT AUTO_INCREMENT PRIMARY KEY,
    family_member_userid INT NOT NULL,
    family_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    message_date DATETIME NOT NULL,
    message_content TEXT NOT NULL,
    FOREIGN KEY (family_member_userid, family_username) REFERENCES family_member(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);

-- Create Support Table
CREATE TABLE support (
    support_id INT AUTO_INCREMENT PRIMARY KEY,
    family_member_userid INT NOT NULL,
    family_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    start_date DATETIME NOT NULL,
    end_date DATETIME,
    relation_to_patient VARCHAR(50),
    FOREIGN KEY (family_member_userid, family_username) REFERENCES family_member(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);






DELIMITER $$

CREATE PROCEDURE AddWebUser(
    IN p_fname VARCHAR(50),
    IN p_lname VARCHAR(50),
    IN p_gender ENUM('male','female','other','rather not say'),
    IN p_dob DATE,
    IN p_email VARCHAR(200),
    IN p_token VARCHAR(150),
    IN p_account_status ENUM('pending','active'),
    IN p_password_hashed VARCHAR(100),
    IN p_userType ENUM('Hypertensive Individual', 'Family Member', 'Healthcare Professional'),
    IN p_education_level VARCHAR(50),  -- For Family Member
    IN p_years_of_exp INT,             -- For Healthcare Professional
    OUT p_generated_username VARCHAR(50)
)
BEGIN
    DECLARE userExists INT;
    DECLARE newUserID INT;
    DECLARE p_username VARCHAR(10);
    DECLARE firstPart VARCHAR(3);
    DECLARE lastPart VARCHAR(3);
	DECLARE p_token_expiration datetime;
   
    -- Check if the email already exists
    SELECT COUNT(*) INTO userExists FROM web_users WHERE email = p_email;

    IF userExists = 0 THEN

        -- Set token expiration (10 minutes from now)
        SET p_token_expiration = NOW() + INTERVAL 10 MINUTE;
        -- Insert into web_users table without username
        INSERT INTO web_users (fname, lname, gender, dob, email, token, token_expiration,account_status, password)
        VALUES (p_fname, p_lname, p_gender, p_dob, p_email, p_token,p_token_expiration,p_account_status, p_password_hashed);

        -- Get the new userID
        SET newUserID = LAST_INSERT_ID();

        -- Extract the first 3 letters of fname and last 3 letters of lname (handling short names)
        SET firstPart = LEFT(p_fname, 3);
        SET lastPart = LEFT(p_lname, 3);

        -- Construct username
        SET p_username = CONCAT(firstPart, '_', lastPart, newUserID);
        SET p_generated_username =p_username;
        -- Update the user with the generated username
        UPDATE web_users SET username = p_username WHERE userID = newUserID;

        -- Insert into the appropriate table based on user type
        CASE 
            WHEN p_userType = 'Hypertensive Individual' THEN
                INSERT INTO patient (userid, username) VALUES (newUserID, p_username);
            WHEN p_userType = 'Family Member' THEN
                INSERT INTO family_member (userid, username, education_level) VALUES (newUserID, p_username, p_education_level);
            WHEN p_userType = 'Healthcare Professional' THEN
                INSERT INTO health_care_prof (userid, username, years_of_exp) 
                VALUES (newUserID, p_username);
            ELSE SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'Invalid userType';
        END CASE;
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Email already exists.';
    END IF;
END $$

DELIMITER ;




DELIMITER $$

CREATE PROCEDURE ActivateUser(
    IN p_token VARCHAR(100)
)
BEGIN
    DECLARE tokenExists INT;
    DECLARE accountActive INT;
    DECLARE tokenValid INT;

    -- Check if the token exists
    SELECT COUNT(*) INTO tokenExists 
    FROM web_users 
    WHERE token = p_token;

    -- Check if the account is already active
    SELECT COUNT(*) INTO accountActive 
    FROM web_users 
    WHERE token = p_token AND account_status = 'active';

    -- Check if the token is valid (not expired and account is still pending)
    SELECT COUNT(*) INTO tokenValid 
    FROM web_users 
    WHERE token = p_token 
    AND account_status = 'pending' 
    AND token_expiration > NOW();

    -- Case 1: Token does not exist
    IF tokenExists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid token';

    -- Case 2: Account is already active
    ELSEIF accountActive > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Account is already active.';

    -- Case 3: Token exists but is expired
    ELSEIF tokenValid = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Activation link expired. A new one has been sent to your email.';

    -- Case 4: Token is valid, account is pending, and within time limit â†’ Activate the account
    ELSE
        UPDATE web_users
        SET account_status = 'active'
        WHERE token = p_token;
    END IF;
END $$

DELIMITER ;




DELIMITER $$

CREATE PROCEDURE UpdateUserTokenAndPassword(
    IN p_current_token VARCHAR(150),
    IN p_new_token VARCHAR(150),
    IN p_new_password_hashed VARCHAR(100)
)
BEGIN
    DECLARE userExists INT;

    -- Check if a user exists with the given current token
    SELECT COUNT(*) INTO userExists FROM web_users WHERE token = p_current_token;

    IF userExists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid token. No matching user found.';
    ELSE
        -- Update the token, expiration, and password
        UPDATE web_users 
        SET 
            token = p_new_token,
            token_expiration = NOW() + INTERVAL 10 MINUTE,
            password = p_new_password_hashed
        WHERE token = p_current_token;

        -- Return the updated user details as a result set
        SELECT fname, lname, username 
        FROM web_users 
        WHERE token = p_new_token;
    END IF;
END $$

DELIMITER ;




DELIMITER $$

CREATE PROCEDURE UpdateUserTokenAndPassword(
    IN p_current_token VARCHAR(150),
    IN p_new_token VARCHAR(150),
    IN p_new_password_hashed VARCHAR(100)
)
BEGIN
    DECLARE userExists INT;

    -- Check if a user exists with the given current token
    SELECT COUNT(*) INTO userExists FROM web_users WHERE token = p_current_token;

    IF userExists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid token. No matching user found.';
    ELSE
        -- Update the token, expiration, and password
        UPDATE web_users 
        SET 
            token = p_new_token,
            token_expiration = NOW() + INTERVAL 10 MINUTE,
            password = p_new_password_hashed
        WHERE token = p_current_token;

        -- Return the updated user details as a result set
        SELECT fname, lname, username, email
        FROM web_users 
        WHERE token = p_new_token;
    END IF;
END $$

DELIMITER ;






DELIMITER $$

CREATE PROCEDURE GetUserPassword(
    IN p_username VARCHAR(50)
)
BEGIN
    DECLARE userPassword VARCHAR(100);

    -- Check if the username exists and retrieve the password
    SELECT password INTO userPassword
    FROM web_users 
    WHERE username COLLATE utf8mb4_general_ci = p_username COLLATE utf8mb4_general_ci;

    -- Check if the username exists
    IF userPassword IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid username';
    ELSE
        SELECT userPassword AS password;
    END IF;
END $$

DELIMITER ;
