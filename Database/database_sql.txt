-- Drop all tables and procedure

DROP PROCEDURE if EXISTS ActivateUser;
DROP PROCEDURE if EXISTS AddWebUser;
DROP PROCEDURE if EXISTS GetUserPassword;
DROP PROCEDURE if EXISTS UpdateUserTokenAndPassword;

DROP TABLE IF EXISTS support;
DROP TABLE IF EXISTS communicate;
DROP TABLE IF EXISTS monitor;
DROP TABLE IF EXISTS message;
DROP TABLE IF EXISTS reading;
DROP TABLE IF EXISTS patient;
DROP TABLE IF EXISTS family_member;
DROP TABLE IF EXISTS health_care_prof;
DROP TABLE IF EXISTS web_users;

create table web_users(
	userID INT AUTO_INCREMENT,
    username varchar(10),
    fname varchar(50),
    lname varchar(50),
    gender enum('male','female','other','rather not say'),
    dob date,
    email varchar(200) Unique,
    token varchar(100) Unique,
    token_expiration datetime,
    account_status enum('pending','active'),
    password varchar(100),
    PRIMARY KEY(userID, username) 
);


-- Create Family Member Table
CREATE TABLE family_member (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    education_level ENUM('No Formal Education','Elementary','Secondary','Some Tertiary','Vocational Training','Degree'),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Health Care Professional Table
CREATE TABLE health_care_prof (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    years_of_exp ENUM('Less than a year','One to two years','Three to Fours years','Five years or more','Over a decade'),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Patient Table
CREATE TABLE patient (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    hyp_status enum('normal','high','low','critical'),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Reading Table
CREATE TABLE reading (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    readingdate DATE NOT NULL,
    readingtime TIME NOT NULL,
    systolic INT NOT NULL,
    diastolic INT NOT NULL,
    heart_rate INT NOT NULL,
    PRIMARY KEY (userid, username, readingdate),-- ensure persons can only send in readings once
    FOREIGN KEY (userid, username) REFERENCES patient(userid, username)
);





CREATE TABLE communicate (
    communicate_id INT AUTO_INCREMENT PRIMARY KEY,
    sender_userid INT NOT NULL,
    sender_username VARCHAR(50) NOT NULL,
    recipient_userid INT NOT NULL,
    recipient_username VARCHAR(50) NOT NULL,
    message_date DATETIME NOT NULL, 
    message_content TEXT NOT NULL,
    FOREIGN KEY (sender_userid, sender_username) REFERENCES web_users(userid, username),
    FOREIGN KEY (recipient_userid, recipient_username) REFERENCES web_users(userid, username)
);


CREATE TABLE request (
    request_id INT AUTO_INCREMENT PRIMARY KEY,
    sender_userid INT NOT NULL,
    sender_username VARCHAR(50) NOT NULL,
    recipient_userid INT NOT NULL,
    recipient_username VARCHAR(50) NOT NULL,
    request_status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
    request_date DATETIME,
    FOREIGN KEY (sender_userid, sender_username) REFERENCES web_users(userID, username),
    FOREIGN KEY (recipient_userid, recipient_username) REFERENCES web_users(userID, username)
);





DELIMITER $$

CREATE PROCEDURE AddWebUser(
    IN p_fname VARCHAR(50),
    IN p_lname VARCHAR(50),
    IN p_gender ENUM('male','female','other','rather not say'),
    IN p_dob DATE,
    IN p_email VARCHAR(200),
    IN p_token VARCHAR(150),
    IN p_account_status ENUM('pending','active'),
    IN p_password_hashed VARCHAR(100),
    IN p_userType ENUM('Hypertensive Individual', 'Family Member', 'Healthcare Professional'),
    IN p_education_level VARCHAR(50),  -- For Family Member
    IN p_years_of_exp ENUM('Less than a year','One to two years','Three to Fours years','Five years or more','Over a decade'),             -- For Healthcare Professional
    OUT p_generated_username VARCHAR(50)
)
BEGIN
    DECLARE userExists INT;
    DECLARE newUserID INT;
    DECLARE p_username VARCHAR(10);
    DECLARE firstPart VARCHAR(3);
    DECLARE lastPart VARCHAR(3);
	DECLARE p_token_expiration datetime;
   
    -- Check if the email already exists
    SELECT COUNT(*) INTO userExists FROM web_users WHERE email = p_email;

    IF userExists = 0 THEN

        -- Set token expiration (10 minutes from now)
        SET p_token_expiration = NOW() + INTERVAL 10 MINUTE;
        -- Insert into web_users table without username
        INSERT INTO web_users (fname, lname, gender, dob, email, token, token_expiration,account_status, password)
        VALUES (p_fname, p_lname, p_gender, p_dob, p_email, p_token,p_token_expiration,p_account_status, p_password_hashed);

        -- Get the new userID
        SET newUserID = LAST_INSERT_ID();

        -- Extract the first 3 letters of fname and last 3 letters of lname (handling short names)
        SET firstPart = LEFT(p_fname, 3);
        SET lastPart = LEFT(p_lname, 3);

        -- Construct username
        SET p_username = CONCAT(firstPart, '_', lastPart, newUserID);
        SET p_generated_username =p_username;
        -- Update the user with the generated username
        UPDATE web_users SET username = p_username WHERE userID = newUserID;

        -- Insert into the appropriate table based on user type
        CASE 
            WHEN p_userType = 'Hypertensive Individual' THEN
                INSERT INTO patient (userid, username) VALUES (newUserID, p_username);
            WHEN p_userType = 'Family Member' THEN
                INSERT INTO family_member (userid, username, education_level) VALUES (newUserID, p_username, p_education_level);
            WHEN p_userType = 'Healthcare Professional' THEN
                INSERT INTO health_care_prof (userid, username, years_of_exp) 
                VALUES (newUserID, p_username,p_years_of_exp);
            ELSE SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'Invalid userType';
        END CASE;
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Email already exists.';
    END IF;
END $$

DELIMITER ;




DELIMITER $$

CREATE PROCEDURE ActivateUser(
    IN p_token VARCHAR(100)
)
BEGIN
    DECLARE tokenExists INT;
    DECLARE accountActive INT;
    DECLARE tokenValid INT;

    -- Check if the token exists
    SELECT COUNT(*) INTO tokenExists 
    FROM web_users 
    WHERE token = p_token;

    -- Check if the account is already active
    SELECT COUNT(*) INTO accountActive 
    FROM web_users 
    WHERE token = p_token AND account_status = 'active';

    -- Check if the token is valid (not expired and account is still pending)
    SELECT COUNT(*) INTO tokenValid 
    FROM web_users 
    WHERE token = p_token 
    AND account_status = 'pending' 
    AND token_expiration > NOW();

    -- Case 1: Token does not exist
    IF tokenExists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid token';

    -- Case 2: Account is already active
    ELSEIF accountActive > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Account is already active.';

    -- Case 3: Token exists but is expired
    ELSEIF tokenValid = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Activation link expired. A new one has been sent to your email.';

    -- Case 4: Token is valid, account is pending, and within time limit â†’ Activate the account
    ELSE
        UPDATE web_users
        SET account_status = 'active'
        WHERE token = p_token;
    END IF;
END $$

DELIMITER ;





DELIMITER $$

CREATE PROCEDURE UpdateUserTokenAndPassword(
    IN p_current_token VARCHAR(150),
    IN p_new_token VARCHAR(150),
    IN p_new_password_hashed VARCHAR(100)
)
BEGIN
    DECLARE userExists INT;

    -- Check if a user exists with the given current token
    SELECT COUNT(*) INTO userExists FROM web_users WHERE token = p_current_token;

    IF userExists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid token. No matching user found.';
    ELSE
        -- Update the token, expiration, and password
        UPDATE web_users 
        SET 
            token = p_new_token,
            token_expiration = NOW() + INTERVAL 10 MINUTE,
            password = p_new_password_hashed
        WHERE token = p_current_token;

        -- Return the updated user details as a result set
        SELECT fname, lname, username, email
        FROM web_users 
        WHERE token = p_new_token;
    END IF;
END $$

DELIMITER ;







DELIMITER $$

CREATE PROCEDURE GetUserCredentialsAndType(
    IN p_username VARCHAR(50)
)
BEGIN
    DECLARE userPassword VARCHAR(100);
    DECLARE accountStatus ENUM('pending', 'active');
    DECLARE userType VARCHAR(50);

    -- Check if the username exists, retrieve the password, and account status
    SELECT password, account_status INTO userPassword, accountStatus
    FROM web_users 
    WHERE username = p_username;

    -- Check if the username exists
    IF userPassword IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid username and/or Password';
    ELSEIF accountStatus = 'pending' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Account is not activated';
    ELSE
        -- Determine the user type by checking which table the username exists in
        IF EXISTS (SELECT 1 FROM patient WHERE username = p_username) THEN
            SET userType = 'Patient';
        ELSEIF EXISTS (SELECT 1 FROM family_member WHERE username = p_username) THEN
            SET userType = 'Family Member';
        ELSEIF EXISTS (SELECT 1 FROM health_care_prof WHERE username = p_username) THEN
            SET userType = 'Health Care Professional';
        ELSE
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'User type not found.';
        END IF;

        -- Return the password and user type
        SELECT userPassword AS password, userType AS user_type;
    END IF;
END $$

DELIMITER ;







DELIMITER $$

CREATE PROCEDURE AddBloodPressureReading(
    IN p_username VARCHAR(50),
    IN p_reading_date DATE,
    IN p_reading_time TIME,
    IN p_systolic INT,
    IN p_diastolic INT,
    IN p_heart_rate INT
)
BEGIN
    DECLARE user_exists INT;
    DECLARE reading_exists INT;
    DECLARE user_id INT;
    
    -- Check if the username exists in the patient table and get the userID
    SELECT userid INTO user_id FROM patient WHERE username = p_username;
    SET user_exists = (user_id IS NOT NULL);

    IF user_exists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'User is not a registered patient';
    END IF;

    -- Check if a reading already exists for this user on the given date
    SELECT COUNT(*) INTO reading_exists FROM reading 
    WHERE userid = user_id AND username = p_username AND readingdate = p_reading_date;

    IF reading_exists > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'A reading already exists for the selected date';
    END IF;

    -- Insert the new reading
    INSERT INTO reading (userid, username, readingdate, readingtime, systolic, diastolic, heart_rate)
    VALUES (user_id, p_username, p_reading_date, p_reading_time, p_systolic, p_diastolic, p_heart_rate);

END $$

DELIMITER ;



DELIMITER $$

CREATE PROCEDURE GetBloodPressureReadings(
    IN p_username VARCHAR(50),
    IN p_page INT,
    IN p_limit INT
)
BEGIN
    DECLARE user_exists INT;
    DECLARE user_id INT;
    DECLARE offset_value INT;
    DECLARE total_records INT;
    DECLARE records_in_period INT;

    -- Calculate offset for pagination based on the user-specified limit
    SET offset_value = (p_page - 1) * p_limit;

    -- Check if the username exists in the patient table and get the userID
    SELECT userid INTO user_id FROM patient WHERE username = p_username;
    SET user_exists = (user_id IS NOT NULL);

    IF user_exists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'User is not a registered patient';
    END IF;

    -- Check if the user has ever entered any readings at all
    SELECT COUNT(*) INTO total_records FROM reading WHERE userid = user_id;

    IF total_records = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No records found. You may not have entered any data yet.';
    END IF;

    -- Check if the offset exceeds total records (i.e., no more pages available)
    IF offset_value >= total_records THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No more records available';
    END IF;

    -- Check if there are records in the requested period (user-specified limit)
    SELECT COUNT(*) INTO records_in_period 
    FROM (SELECT readingdate FROM reading WHERE userid = user_id ORDER BY readingdate DESC LIMIT p_limit OFFSET offset_value) AS subquery;

    IF records_in_period = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No records found for that period';
    END IF;

    -- Retrieve the readings for the requested period
    SELECT readingdate, readingtime, systolic, diastolic, heart_rate
    FROM reading 
    WHERE userid = user_id
    ORDER BY readingdate DESC
    LIMIT p_limit OFFSET offset_value;

END $$

DELIMITER ;





DELIMITER $$

CREATE PROCEDURE GetMatchingUsers(
    IN p_username_prefix VARCHAR(50),
    IN p_account_type VARCHAR(30),
    IN p_logged_in_username VARCHAR(50)
)
BEGIN
    -- Validate the account type
    IF p_account_type NOT IN ('Family member', 'Health Care Professional', 'Patient') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid account type. Must be "Family member", "Health Care Professional", or "Patient".';
    END IF;

    -- Fetch users based on the account type and username prefix
    IF p_account_type = 'Family member' THEN
        SELECT 
            fm.username AS family_member_username,
            CASE 
                -- Return accepted if logged-in user is the sender or receiver of an accepted request
                WHEN EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.sender_username = p_logged_in_username
                      AND request.recipient_username = fm.username
                      AND request.request_status = 'accepted'
                ) OR EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.recipient_username = p_logged_in_username
                      AND request.sender_username = fm.username
                      AND request.request_status = 'accepted'
                ) THEN 'accepted'
                -- Return other statuses or no request
                WHEN EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.sender_username = p_logged_in_username
                      AND request.recipient_username = fm.username
                      AND request.request_status = 'pending'
                ) THEN 'pending'
                WHEN EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.sender_username = p_logged_in_username
                      AND request.recipient_username = fm.username
                      AND request.request_status = 'rejected'
                ) THEN 'rejected'
                ELSE 'No Request Sent'
            END AS request_status
        FROM family_member fm
        WHERE fm.username LIKE CONCAT(p_username_prefix, '%');

    ELSEIF p_account_type = 'Health Care Professional' THEN
        SELECT 
            hp.username AS healthcare_prof_username,
            CASE 
                -- Return accepted if logged-in user is the sender or receiver of an accepted request
                WHEN EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.sender_username = p_logged_in_username
                      AND request.recipient_username = hp.username
                      AND request.request_status = 'accepted'
                ) OR EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.recipient_username = p_logged_in_username
                      AND request.sender_username = hp.username
                      AND request.request_status = 'accepted'
                ) THEN 'accepted'
                -- Return other statuses or no request
                WHEN EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.sender_username = p_logged_in_username
                      AND request.recipient_username = hp.username
                      AND request.request_status = 'pending'
                ) THEN 'pending'
                WHEN EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.sender_username = p_logged_in_username
                      AND request.recipient_username = hp.username
                      AND request.request_status = 'rejected'
                ) THEN 'rejected'
                ELSE 'No Request Sent'
            END AS request_status
        FROM health_care_prof hp
        WHERE hp.username LIKE CONCAT(p_username_prefix, '%');

    ELSEIF p_account_type = 'Patient' THEN
        SELECT 
            pt.username AS patient_username,
            CASE 
                -- Return accepted if logged-in user is the sender or receiver of an accepted request
                WHEN EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.sender_username = p_logged_in_username
                      AND request.recipient_username = pt.username
                      AND request.request_status = 'accepted'
                ) OR EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.recipient_username = p_logged_in_username
                      AND request.sender_username = pt.username
                      AND request.request_status = 'accepted'
                ) THEN 'accepted'
                -- Return other statuses or no request
                WHEN EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.sender_username = p_logged_in_username
                      AND request.recipient_username = pt.username
                      AND request.request_status = 'pending'
                ) THEN 'pending'
                WHEN EXISTS (
                    SELECT 1 
                    FROM request
                    WHERE request.sender_username = p_logged_in_username
                      AND request.recipient_username = pt.username
                      AND request.request_status = 'rejected'
                ) THEN 'rejected'
                ELSE 'No Request Sent'
            END AS request_status
        FROM patient pt
        WHERE pt.username LIKE CONCAT(p_username_prefix, '%');
    END IF;
END $$

DELIMITER ;











DELIMITER $$

CREATE PROCEDURE PopulateSupportTable(
    IN p_patient_username VARCHAR(50),
    IN p_family_username VARCHAR(50),
    IN p_start_date DATETIME
)
BEGIN
    DECLARE patient_user_id INT;
    DECLARE family_user_id INT;
    DECLARE existing_request INT;

    -- Check if the patient username is valid and get their userID
    SELECT userid INTO patient_user_id 
    FROM patient 
    WHERE username = p_patient_username;

    IF patient_user_id IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid patient username.';
    END IF;

    -- Check if the family member username is valid and get their userID
    SELECT userid INTO family_user_id 
    FROM family_member 
    WHERE username = p_family_username;

    IF family_user_id IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid family member username.';
    END IF;

    -- Check if a record already exists in the support table
    SELECT COUNT(*) INTO existing_request 
    FROM support 
    WHERE patient_userid = patient_user_id 
      AND family_member_userid = family_user_id;

    -- If the record exists, delete it. Otherwise, insert a new one.
    IF existing_request > 0 THEN
        DELETE FROM support 
        WHERE patient_userid = patient_user_id 
          AND family_member_userid = family_user_id;
    ELSE
        INSERT INTO support (family_member_userid, family_username, patient_userid, patient_username, start_date, support_status)
        VALUES (family_user_id, p_family_username, patient_user_id, p_patient_username, p_start_date, 'pending');
    END IF;
END $$

DELIMITER ;




DELIMITER $$

CREATE PROCEDURE ManageRequest(
    IN p_sender_username VARCHAR(50), 
    IN p_recipient_username VARCHAR(50), 
    IN p_current_date DATETIME 
)
BEGIN
    DECLARE sender_userid INT;
    DECLARE recipient_userid INT;
    DECLARE sender_role ENUM('Health Care Professional', 'Patient', 'Family Member');
    DECLARE recipient_role ENUM('Health Care Professional', 'Patient', 'Family Member');
    DECLARE existing_request_id INT;
    DECLARE existing_request_status ENUM('pending', 'accepted', 'rejected');
    DECLARE existing_sender_username VARCHAR(50);

    -- Labeled block to allow the use of LEAVE
    procedure_end: BEGIN
        -- Determine sender role and user ID
        SELECT userid INTO sender_userid 
        FROM web_users 
        WHERE username = p_sender_username;

        IF EXISTS (SELECT 1 FROM health_care_prof WHERE userid = sender_userid) THEN
            SET sender_role = 'Health Care Professional';
        ELSEIF EXISTS (SELECT 1 FROM patient WHERE userid = sender_userid) THEN
            SET sender_role = 'Patient';
        ELSEIF EXISTS (SELECT 1 FROM family_member WHERE userid = sender_userid) THEN
            SET sender_role = 'Family Member';
        ELSE
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid sender: Must be a healthcare professional, patient, or family member.';
        END IF;

        -- Determine recipient role and user ID
        SELECT userid INTO recipient_userid 
        FROM web_users 
        WHERE username = p_recipient_username;

        IF EXISTS (SELECT 1 FROM health_care_prof WHERE userid = recipient_userid) THEN
            SET recipient_role = 'Health Care Professional';
        ELSEIF EXISTS (SELECT 1 FROM patient WHERE userid = recipient_userid) THEN
            SET recipient_role = 'Patient';
        ELSEIF EXISTS (SELECT 1 FROM family_member WHERE userid = recipient_userid) THEN
            SET recipient_role = 'Family Member';
        ELSE
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid recipient: Must be a healthcare professional, patient, or family member.';
        END IF;

        -- Restrict requests between users of the same role
        IF sender_role = recipient_role THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Requests cannot be sent between users of the same role.';
        END IF;

        -- Check for existing request between the sender and recipient
        SELECT request_id, request_status, sender_username INTO existing_request_id, existing_request_status, existing_sender_username
        FROM request
        WHERE (sender_username = p_sender_username AND recipient_username = p_recipient_username)
           OR (sender_username = p_recipient_username AND recipient_username = p_sender_username);

        -- Handle the edge cases
        IF existing_request_id IS NOT NULL THEN
            -- Case 1: Modify existing request to "accepted" if roles are reversed
            IF existing_request_status = 'pending' AND existing_sender_username != p_sender_username THEN
                UPDATE request 
                SET request_status = 'accepted', request_date = p_current_date
                WHERE request_id = existing_request_id;

            -- Case 2: Cancel request if the same person sends another request
            ELSEIF existing_sender_username = p_sender_username THEN
                DELETE FROM request WHERE request_id = existing_request_id;

            -- Prevent further requests if already accepted
            ELSEIF existing_request_status = 'accepted' THEN
                SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Request already accepted. No further action required.';
            END IF;

            -- Exit the procedure
            LEAVE procedure_end;
        END IF;

        -- Insert new request if no existing record
        INSERT INTO request (
            sender_userid, sender_username, 
            recipient_userid, recipient_username, 
            request_status, request_date
        ) VALUES (
            sender_userid, p_sender_username, 
            recipient_userid, p_recipient_username, 
            'pending', p_current_date
        );

    END procedure_end;
END $$

DELIMITER ;





DELIMITER $$

CREATE PROCEDURE GetUserPendingRequests(
    IN p_username VARCHAR(50) -- Username of the user
)
BEGIN
    DECLARE user_role VARCHAR(50);
    DECLARE user_id INT;

    -- Determine the user's role and user ID
    IF EXISTS (SELECT 1 FROM patient WHERE username = p_username) THEN
        SET user_role = 'Patient';
        SELECT userid INTO user_id FROM patient WHERE username = p_username;
    ELSEIF EXISTS (SELECT 1 FROM family_member WHERE username = p_username) THEN
        SET user_role = 'Family Member';
        SELECT userid INTO user_id FROM family_member WHERE username = p_username;
    ELSEIF EXISTS (SELECT 1 FROM health_care_prof WHERE username = p_username) THEN
        SET user_role = 'Health Care Professional';
        SELECT userid INTO user_id FROM health_care_prof WHERE username = p_username;
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid username or user does not exist.';
    END IF;

    -- Return pending requests based on the user's role
    CASE user_role
        WHEN 'Patient' THEN
            -- Retrieve pending requests for a patient
            SELECT 
                'Support Request' AS request_type,
                family_username AS from_username,
                start_date,
                support_status
            FROM support
            WHERE patient_userid = user_id AND support_status = 'pending'
            UNION ALL
            SELECT 
                'Monitor Request' AS request_type,
                healthcare_prof_username AS from_username,
                start_date,
                monitor_status AS support_status
            FROM monitor
            WHERE patient_userid = user_id AND monitor_status = 'pending';

        WHEN 'Family Member' THEN
            -- Retrieve pending requests sent by a family member
            SELECT 
                'Support Request' AS request_type,
                patient_username AS to_username,
                start_date,
                support_status
            FROM support
            WHERE family_member_userid = user_id AND support_status = 'pending';

        WHEN 'Health Care Professional' THEN
            -- Retrieve pending monitor requests sent to the healthcare professional
            SELECT 
                'Monitor Request' AS request_type,
                patient_username AS to_username,
                start_date,
                monitor_status AS support_status
            FROM monitor
            WHERE healthcare_prof_userid = user_id AND monitor_status = 'pending';

    END CASE;
END $$

DELIMITER ;
