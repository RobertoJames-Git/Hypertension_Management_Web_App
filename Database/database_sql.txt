------Drop all tables


DROP TABLE IF EXISTS support;
DROP TABLE IF EXISTS communicate;
DROP TABLE IF EXISTS monitor;
DROP TABLE IF EXISTS message;
DROP TABLE IF EXISTS reading;
DROP TABLE IF EXISTS patient;
DROP TABLE IF EXISTS family_member;
DROP TABLE IF EXISTS health_care_prof;
DROP TABLE IF EXISTS monitor_request;
DROP TABLE IF EXISTS web_users;

create table web_users(
	userID INT AUTO_INCREMENT,
    username varchar(10),
    fname varchar(50),
    lname varchar(50),
    gender enum('male','female','other','rather not say'),
    dob date,
    email varchar(200),
    token varchar(150),
    account_status enum('pending','active'),
    password varchar(100),
    PRIMARY KEY(userID, username) 
);


CREATE TABLE monitor_request (
    request_id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id INT NOT NULL,
    sender_username VARCHAR(50) NOT NULL,
    role ENUM('Health care Professional', 'Patient', 'Family Member') NOT NULL,
    request_date DATETIME NOT NULL,
    request_status ENUM('pending', 'accepted', 'rejected') NOT NULL,
    recipient_info VARCHAR(255) NOT NULL,
    FOREIGN KEY (sender_id, sender_username) REFERENCES web_users(userid, username)
);

-- Create Family Member Table
CREATE TABLE family_member (
    userid INT AUTO_INCREMENT NOT NULL,
    username VARCHAR(50) NOT NULL,
    education_level VARCHAR(50),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Health Care Professional Table
CREATE TABLE health_care_prof (
    userid INT AUTO_INCREMENT NOT NULL,
    username VARCHAR(50) NOT NULL,
    years_of_exp INT NOT NULL,
    workplace VARCHAR(100),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Patient Table
CREATE TABLE patient (
    userid INT AUTO_INCREMENT NOT NULL,
    username VARCHAR(50) NOT NULL,
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Reading Table
CREATE TABLE reading (
    reading_id VARCHAR(50) NOT NULL,
    readingdate DATE NOT NULL,
    systolic INT NOT NULL,
    diastolic INT NOT NULL,
    PRIMARY KEY (reading_id)
);

-- Create Message Table
CREATE TABLE message (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    healthcare_prof_userid INT NOT NULL,
    healthcare_prof_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    message_date DATETIME NOT NULL,
    message_content TEXT NOT NULL,
    FOREIGN KEY (healthcare_prof_userid, healthcare_prof_username) REFERENCES health_care_prof(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);

-- Create Monitor Table
CREATE TABLE monitor (
    monitor_id INT AUTO_INCREMENT PRIMARY KEY,
    healthcare_prof_userid INT NOT NULL,
    healthcare_prof_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    start_date DATETIME NOT NULL,
    end_date DATETIME NOT NULL,
    FOREIGN KEY (healthcare_prof_userid, healthcare_prof_username) REFERENCES health_care_prof(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);

-- Create Communicate Table
CREATE TABLE communicate (
    communicate_id INT AUTO_INCREMENT PRIMARY KEY,
    family_member_userid INT NOT NULL,
    family_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    message_date DATETIME NOT NULL,
    message_content TEXT NOT NULL,
    FOREIGN KEY (family_member_userid, family_username) REFERENCES family_member(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);

-- Create Support Table
CREATE TABLE support (
    support_id INT AUTO_INCREMENT PRIMARY KEY,
    family_member_userid INT NOT NULL,
    family_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    start_date DATETIME NOT NULL,
    end_date DATETIME,
    relation_to_patient VARCHAR(50),
    FOREIGN KEY (family_member_userid, family_username) REFERENCES family_member(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);


