-- Drop all tables and procedure

DROP PROCEDURE if EXISTS ActivateUser;
DROP PROCEDURE if EXISTS AddWebUser;
DROP PROCEDURE if EXISTS GetUserPassword;
DROP PROCEDURE if EXISTS UpdateUserTokenAndPassword;

DROP TABLE IF EXISTS support;
DROP TABLE IF EXISTS communicate;
DROP TABLE IF EXISTS monitor;
DROP TABLE IF EXISTS message;
DROP TABLE IF EXISTS reading;
DROP TABLE IF EXISTS patient;
DROP TABLE IF EXISTS family_member;
DROP TABLE IF EXISTS health_care_prof;
DROP TABLE IF EXISTS web_users;

create table web_users(
	userID INT AUTO_INCREMENT,
    username varchar(10),
    fname varchar(50),
    lname varchar(50),
    gender enum('male','female','other','rather not say'),
    dob date,
    email varchar(200) Unique,
    token varchar(100) Unique,
    token_expiration datetime,
    account_status enum('pending','active'),
    password varchar(100),
    PRIMARY KEY(userID, username) 
);


-- Create Family Member Table
CREATE TABLE family_member (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    education_level ENUM('No Formal Education','Elementary','Secondary','Some Tertiary','Vocational Training','Degree'),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Health Care Professional Table
CREATE TABLE health_care_prof (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    years_of_exp ENUM('Less than a year','One to two years','Three to Fours years','Five years or more','Over a decade'),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Patient Table
CREATE TABLE patient (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    hyp_status enum('normal','high','low','critical'),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES web_users(userid, username)
);

-- Create Reading Table
CREATE TABLE reading (
    userid INT NOT NULL,
    username VARCHAR(50) NOT NULL,
    readingdate DATE NOT NULL,
    readingtime TIME NOT NULL,
    systolic INT NOT NULL,
    diastolic INT NOT NULL,
    heart_rate INT NOT NULL,
    PRIMARY KEY (userid, username, readingdate),-- ensure persons can only send in readings once
    FOREIGN KEY (userid, username) REFERENCES patient(userid, username)
);

-- Create Message Table
CREATE TABLE message (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    healthcare_prof_userid INT NOT NULL,
    healthcare_prof_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    message_date DATETIME NOT NULL,
    message_content TEXT NOT NULL,
    FOREIGN KEY (healthcare_prof_userid, healthcare_prof_username) REFERENCES health_care_prof(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);

CREATE TABLE monitor (
    monitor_id INT AUTO_INCREMENT PRIMARY KEY,
    healthcare_prof_userid INT NOT NULL,
    healthcare_prof_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    start_date DATETIME,
    end_date DATETIME,
    monitor_status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending', -- New field for status
    sentby VARCHAR(50) NOT NULL, -- Keeps track of the sender username
    FOREIGN KEY (healthcare_prof_userid, healthcare_prof_username) REFERENCES health_care_prof(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);



-- Create Communicate Table
CREATE TABLE communicate (
    communicate_id INT AUTO_INCREMENT PRIMARY KEY,
    family_member_userid INT NOT NULL,
    family_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    message_date DATETIME NOT NULL,
    message_content TEXT NOT NULL,
    FOREIGN KEY (family_member_userid, family_username) REFERENCES family_member(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username)
);

-- Create Support Table
CREATE TABLE support (
    support_id INT AUTO_INCREMENT PRIMARY KEY,
    family_member_userid INT NOT NULL,
    family_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    start_date DATETIME NOT NULL,
    end_date DATETIME,
    support_status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
    FOREIGN KEY (family_member_userid, family_username) REFERENCES family_member(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES patient(userid, username),
    UNIQUE (patient_userid, family_member_userid) -- Enforce uniqueness for each patient-family member pair
);




DELIMITER $$

CREATE PROCEDURE AddWebUser(
    IN p_fname VARCHAR(50),
    IN p_lname VARCHAR(50),
    IN p_gender ENUM('male','female','other','rather not say'),
    IN p_dob DATE,
    IN p_email VARCHAR(200),
    IN p_token VARCHAR(150),
    IN p_account_status ENUM('pending','active'),
    IN p_password_hashed VARCHAR(100),
    IN p_userType ENUM('Hypertensive Individual', 'Family Member', 'Healthcare Professional'),
    IN p_education_level VARCHAR(50),  -- For Family Member
    IN p_years_of_exp ENUM('Less than a year','One to two years','Three to Fours years','Five years or more','Over a decade'),             -- For Healthcare Professional
    OUT p_generated_username VARCHAR(50)
)
BEGIN
    DECLARE userExists INT;
    DECLARE newUserID INT;
    DECLARE p_username VARCHAR(10);
    DECLARE firstPart VARCHAR(3);
    DECLARE lastPart VARCHAR(3);
	DECLARE p_token_expiration datetime;
   
    -- Check if the email already exists
    SELECT COUNT(*) INTO userExists FROM web_users WHERE email = p_email;

    IF userExists = 0 THEN

        -- Set token expiration (10 minutes from now)
        SET p_token_expiration = NOW() + INTERVAL 10 MINUTE;
        -- Insert into web_users table without username
        INSERT INTO web_users (fname, lname, gender, dob, email, token, token_expiration,account_status, password)
        VALUES (p_fname, p_lname, p_gender, p_dob, p_email, p_token,p_token_expiration,p_account_status, p_password_hashed);

        -- Get the new userID
        SET newUserID = LAST_INSERT_ID();

        -- Extract the first 3 letters of fname and last 3 letters of lname (handling short names)
        SET firstPart = LEFT(p_fname, 3);
        SET lastPart = LEFT(p_lname, 3);

        -- Construct username
        SET p_username = CONCAT(firstPart, '_', lastPart, newUserID);
        SET p_generated_username =p_username;
        -- Update the user with the generated username
        UPDATE web_users SET username = p_username WHERE userID = newUserID;

        -- Insert into the appropriate table based on user type
        CASE 
            WHEN p_userType = 'Hypertensive Individual' THEN
                INSERT INTO patient (userid, username) VALUES (newUserID, p_username);
            WHEN p_userType = 'Family Member' THEN
                INSERT INTO family_member (userid, username, education_level) VALUES (newUserID, p_username, p_education_level);
            WHEN p_userType = 'Healthcare Professional' THEN
                INSERT INTO health_care_prof (userid, username, years_of_exp) 
                VALUES (newUserID, p_username,p_years_of_exp);
            ELSE SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'Invalid userType';
        END CASE;
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Email already exists.';
    END IF;
END $$

DELIMITER ;




DELIMITER $$

CREATE PROCEDURE ActivateUser(
    IN p_token VARCHAR(100)
)
BEGIN
    DECLARE tokenExists INT;
    DECLARE accountActive INT;
    DECLARE tokenValid INT;

    -- Check if the token exists
    SELECT COUNT(*) INTO tokenExists 
    FROM web_users 
    WHERE token = p_token;

    -- Check if the account is already active
    SELECT COUNT(*) INTO accountActive 
    FROM web_users 
    WHERE token = p_token AND account_status = 'active';

    -- Check if the token is valid (not expired and account is still pending)
    SELECT COUNT(*) INTO tokenValid 
    FROM web_users 
    WHERE token = p_token 
    AND account_status = 'pending' 
    AND token_expiration > NOW();

    -- Case 1: Token does not exist
    IF tokenExists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid token';

    -- Case 2: Account is already active
    ELSEIF accountActive > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Account is already active.';

    -- Case 3: Token exists but is expired
    ELSEIF tokenValid = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Activation link expired. A new one has been sent to your email.';

    -- Case 4: Token is valid, account is pending, and within time limit â†’ Activate the account
    ELSE
        UPDATE web_users
        SET account_status = 'active'
        WHERE token = p_token;
    END IF;
END $$

DELIMITER ;





DELIMITER $$

CREATE PROCEDURE UpdateUserTokenAndPassword(
    IN p_current_token VARCHAR(150),
    IN p_new_token VARCHAR(150),
    IN p_new_password_hashed VARCHAR(100)
)
BEGIN
    DECLARE userExists INT;

    -- Check if a user exists with the given current token
    SELECT COUNT(*) INTO userExists FROM web_users WHERE token = p_current_token;

    IF userExists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid token. No matching user found.';
    ELSE
        -- Update the token, expiration, and password
        UPDATE web_users 
        SET 
            token = p_new_token,
            token_expiration = NOW() + INTERVAL 10 MINUTE,
            password = p_new_password_hashed
        WHERE token = p_current_token;

        -- Return the updated user details as a result set
        SELECT fname, lname, username, email
        FROM web_users 
        WHERE token = p_new_token;
    END IF;
END $$

DELIMITER ;







DELIMITER $$

CREATE PROCEDURE GetUserCredentialsAndType(
    IN p_username VARCHAR(50)
)
BEGIN
    DECLARE userPassword VARCHAR(100);
    DECLARE accountStatus ENUM('pending', 'active');
    DECLARE userType VARCHAR(50);

    -- Check if the username exists, retrieve the password, and account status
    SELECT password, account_status INTO userPassword, accountStatus
    FROM web_users 
    WHERE username = p_username;

    -- Check if the username exists
    IF userPassword IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid username and/or Password';
    ELSEIF accountStatus = 'pending' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Account is not activated';
    ELSE
        -- Determine the user type by checking which table the username exists in
        IF EXISTS (SELECT 1 FROM patient WHERE username = p_username) THEN
            SET userType = 'Patient';
        ELSEIF EXISTS (SELECT 1 FROM family_member WHERE username = p_username) THEN
            SET userType = 'Family Member';
        ELSEIF EXISTS (SELECT 1 FROM health_care_prof WHERE username = p_username) THEN
            SET userType = 'Health Care Professional';
        ELSE
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'User type not found.';
        END IF;

        -- Return the password and user type
        SELECT userPassword AS password, userType AS user_type;
    END IF;
END $$

DELIMITER ;







DELIMITER $$

CREATE PROCEDURE AddBloodPressureReading(
    IN p_username VARCHAR(50),
    IN p_reading_date DATE,
    IN p_reading_time TIME,
    IN p_systolic INT,
    IN p_diastolic INT,
    IN p_heart_rate INT
)
BEGIN
    DECLARE user_exists INT;
    DECLARE reading_exists INT;
    DECLARE user_id INT;
    
    -- Check if the username exists in the patient table and get the userID
    SELECT userid INTO user_id FROM patient WHERE username = p_username;
    SET user_exists = (user_id IS NOT NULL);

    IF user_exists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'User is not a registered patient';
    END IF;

    -- Check if a reading already exists for this user on the given date
    SELECT COUNT(*) INTO reading_exists FROM reading 
    WHERE userid = user_id AND username = p_username AND readingdate = p_reading_date;

    IF reading_exists > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'A reading already exists for the selected date';
    END IF;

    -- Insert the new reading
    INSERT INTO reading (userid, username, readingdate, readingtime, systolic, diastolic, heart_rate)
    VALUES (user_id, p_username, p_reading_date, p_reading_time, p_systolic, p_diastolic, p_heart_rate);

END $$

DELIMITER ;



DELIMITER $$

CREATE PROCEDURE GetBloodPressureReadings(
    IN p_username VARCHAR(50),
    IN p_page INT,
    IN p_limit INT
)
BEGIN
    DECLARE user_exists INT;
    DECLARE user_id INT;
    DECLARE offset_value INT;
    DECLARE total_records INT;
    DECLARE records_in_period INT;

    -- Calculate offset for pagination based on the user-specified limit
    SET offset_value = (p_page - 1) * p_limit;

    -- Check if the username exists in the patient table and get the userID
    SELECT userid INTO user_id FROM patient WHERE username = p_username;
    SET user_exists = (user_id IS NOT NULL);

    IF user_exists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'User is not a registered patient';
    END IF;

    -- Check if the user has ever entered any readings at all
    SELECT COUNT(*) INTO total_records FROM reading WHERE userid = user_id;

    IF total_records = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No records found. You may not have entered any data yet.';
    END IF;

    -- Check if the offset exceeds total records (i.e., no more pages available)
    IF offset_value >= total_records THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No more records available';
    END IF;

    -- Check if there are records in the requested period (user-specified limit)
    SELECT COUNT(*) INTO records_in_period 
    FROM (SELECT readingdate FROM reading WHERE userid = user_id ORDER BY readingdate DESC LIMIT p_limit OFFSET offset_value) AS subquery;

    IF records_in_period = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No records found for that period';
    END IF;

    -- Retrieve the readings for the requested period
    SELECT readingdate, readingtime, systolic, diastolic, heart_rate
    FROM reading 
    WHERE userid = user_id
    ORDER BY readingdate DESC
    LIMIT p_limit OFFSET offset_value;

END $$

DELIMITER ;






DELIMITER $$

CREATE PROCEDURE GetMatchingUsers(
    IN p_username_prefix VARCHAR(50),
    IN p_account_type VARCHAR(20),
    IN p_sender_username VARCHAR(50) -- Sender's username to check for existing requests
)
BEGIN
    -- Validate the account type
    IF p_account_type NOT IN ('Family member', 'Health Prof','Patient') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid account type. Must be "Family member" or "Health Prof" or "Patient".';
    END IF;

    -- Select users based on the account type and include request status logic
    IF p_account_type = 'Family member' THEN
        SELECT 
            fm.username AS family_member_username,
            CASE 
                -- Check if the sender already sent a request (pending/rejected)
                WHEN EXISTS (
                    SELECT 1 
                    FROM support 
                    WHERE support.family_member_userid = fm.userid
                      AND support.patient_username = p_sender_username
                      AND support.support_status IN ('pending', 'rejected')
                ) THEN 'Request pending'

                -- Check if the receiver (family member) sent a request to the sender
                WHEN EXISTS (
                    SELECT 1 
                    FROM support 
                    WHERE support.family_member_userid = fm.userid
                      AND support.family_username = fm.username
                      AND support.patient_username = p_sender_username
                      AND support.support_status = 'pending'
                ) THEN 'Manage request'

                ELSE 'No Request Sent'
            END AS request_status
        FROM family_member fm
        WHERE fm.username LIKE CONCAT(p_username_prefix, '%');
    ELSEIF p_account_type = 'Health Prof' THEN
        SELECT 
            hp.username AS healthcare_prof_username,
            CASE 
                -- Check if the sender already sent a request (pending/rejected)
                WHEN EXISTS (
                    SELECT 1 
                    FROM monitor_request 
                    WHERE monitor_request.sender_username = p_sender_username 
                      AND monitor_request.recipient_info = hp.username
                      AND monitor_request.request_status IN ('pending', 'rejected')
                ) THEN 'Request pending'

                -- Check if the receiver (healthcare professional) sent a request to the sender
                WHEN EXISTS (
                    SELECT 1 
                    FROM monitor_request 
                    WHERE monitor_request.recipient_info = p_sender_username
                      AND monitor_request.sender_username = hp.username
                      AND monitor_request.request_status = 'pending'
                ) THEN 'Manage request'

                ELSE 'No Request Sent'
            END AS request_status
        FROM health_care_prof hp
        WHERE hp.username LIKE CONCAT(p_username_prefix, '%');
    
    ELSEIF p_account_type = 'Patient' THEN
        SELECT 
            pt.username AS matching_username,
            'Patient' AS role,
            CASE 
                -- Check if the sender (e.g., healthcare professional or family member) already sent a request
                WHEN EXISTS (
                    SELECT 1 
                    FROM monitor 
                    WHERE monitor.patient_username = pt.username
                      AND monitor.healthcare_prof_username = p_sender_username
                      AND monitor.end_date IS NULL
                ) THEN 'Request pending'

                -- Check if the sender (e.g., healthcare professional) is already monitoring the patient
                WHEN EXISTS (
                    SELECT 1 
                    FROM monitor 
                    WHERE monitor.patient_username = pt.username
                      AND monitor.healthcare_prof_username = p_sender_username
                      AND monitor.end_date IS NULL
                ) THEN 'Manage request'

                ELSE 'No Request Sent'
            END AS request_status
        FROM patient pt
        WHERE pt.username LIKE CONCAT(p_username_prefix, '%');

    END IF;
END $$

DELIMITER ;








DELIMITER $$

CREATE PROCEDURE PopulateSupportTable(
    IN p_patient_username VARCHAR(50),
    IN p_family_username VARCHAR(50),
    IN p_start_date DATETIME
)
BEGIN
    DECLARE patient_user_id INT;
    DECLARE family_user_id INT;
    DECLARE existing_request INT;

    -- Check if the patient username is valid and get their userID
    SELECT userid INTO patient_user_id 
    FROM patient 
    WHERE username = p_patient_username;

    IF patient_user_id IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid patient username.';
    END IF;

    -- Check if the family member username is valid and get their userID
    SELECT userid INTO family_user_id 
    FROM family_member 
    WHERE username = p_family_username;

    IF family_user_id IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid family member username.';
    END IF;

    -- Check if a record already exists in the support table
    SELECT COUNT(*) INTO existing_request 
    FROM support 
    WHERE patient_userid = patient_user_id 
      AND family_member_userid = family_user_id;

    -- If the record exists, delete it. Otherwise, insert a new one.
    IF existing_request > 0 THEN
        DELETE FROM support 
        WHERE patient_userid = patient_user_id 
          AND family_member_userid = family_user_id;
    ELSE
        INSERT INTO support (family_member_userid, family_username, patient_userid, patient_username, start_date, support_status)
        VALUES (family_user_id, p_family_username, patient_user_id, p_patient_username, p_start_date, 'pending');
    END IF;
END $$

DELIMITER ;






DELIMITER $$

CREATE PROCEDURE ManageMonitorRequest(
    IN p_sender_username VARCHAR(50), 
    IN p_recipient_username VARCHAR(50), 
    IN p_current_date DATETIME 
)
BEGIN
    DECLARE sender_userid INT;
    DECLARE recipient_userid INT;
    DECLARE sender_role ENUM('Health Care Professional', 'Patient');
    DECLARE recipient_role ENUM('Health Care Professional', 'Patient');
    DECLARE existing_monitor_id INT;
    DECLARE existing_monitor_status ENUM('pending', 'accepted', 'rejected');
    DECLARE existing_sentby VARCHAR(50);

    -- Determine sender role and user ID
    SELECT userid INTO sender_userid FROM health_care_prof WHERE username = p_sender_username;
    IF sender_userid IS NOT NULL THEN
        SET sender_role = 'Health Care Professional';
    ELSE
        SELECT userid INTO sender_userid FROM patient WHERE username = p_sender_username;
        IF sender_userid IS NOT NULL THEN
            SET sender_role = 'Patient';
        ELSE
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid sender: Must be a healthcare professional or patient.';
        END IF;
    END IF;

    -- Determine recipient role and user ID
    SELECT userid INTO recipient_userid FROM health_care_prof WHERE username = p_recipient_username;
    IF recipient_userid IS NOT NULL THEN
        SET recipient_role = 'Health Care Professional';
    ELSE
        SELECT userid INTO recipient_userid FROM patient WHERE username = p_recipient_username;
        IF recipient_userid IS NOT NULL THEN
            SET recipient_role = 'Patient';
        ELSE
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid recipient: Must be a healthcare professional or patient.';
        END IF;
    END IF;

    -- Ensure sender and recipient have different roles
    IF sender_role = recipient_role THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Sender and recipient cannot have the same role.';
    END IF;

    -- Check for existing monitor request
    SELECT monitor_id, monitor_status, sentby INTO existing_monitor_id, existing_monitor_status, existing_sentby
    FROM monitor
    WHERE (healthcare_prof_username = p_sender_username AND patient_username = p_recipient_username)
       OR (healthcare_prof_username = p_recipient_username AND patient_username = p_sender_username);

    IF existing_monitor_id IS NOT NULL THEN
        -- Handle role reversal acceptance
        IF existing_monitor_status = 'pending' AND existing_sentby != p_sender_username THEN
            UPDATE monitor 
            SET monitor_status = 'accepted', start_date = p_current_date 
            WHERE monitor_id = existing_monitor_id;
        -- Handle duplicate request (simulate cancellation)
        ELSEIF existing_sentby = p_sender_username AND existing_monitor_status = 'pending' THEN
            DELETE FROM monitor WHERE monitor_id = existing_monitor_id;
        -- If already accepted, prevent further requests
        ELSEIF existing_monitor_status = 'accepted' THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Monitor request already accepted. No further requests allowed.';
        END IF;
    ELSE
        -- Insert new monitor request
        INSERT INTO monitor (
            healthcare_prof_userid, healthcare_prof_username,
            patient_userid, patient_username,
            start_date, monitor_status, sentby
        ) VALUES (
            CASE sender_role WHEN 'Health Care Professional' THEN sender_userid ELSE recipient_userid END,
            CASE sender_role WHEN 'Health Care Professional' THEN p_sender_username ELSE p_recipient_username END,
            CASE sender_role WHEN 'Patient' THEN sender_userid ELSE recipient_userid END,
            CASE sender_role WHEN 'Patient' THEN p_sender_username ELSE p_recipient_username END,
            NULL, 'pending', p_sender_username
        );
    END IF;
END $$

DELIMITER ;
