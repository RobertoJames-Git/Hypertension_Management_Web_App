-- Create User Table
CREATE TABLE UserProfile (
    userid INT AUTO_INCREMENT NOT NULL,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    PRIMARY KEY (userid, username)
);

CREATE TABLE monitor_request (
    request_id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id INT NOT NULL,
    sender_username VARCHAR(50) NOT NULL,
    role ENUM('Health care Professional', 'Patient', 'Family Member') NOT NULL,
    request_date DATETIME NOT NULL,
    request_status ENUM('pending', 'accepted', 'rejected') NOT NULL,
    recipient_info VARCHAR(255) NOT NULL,
    FOREIGN KEY (sender_id,sender_username) REFERENCES UserProfile(userid, username)
);


-- Create Family Member Table
CREATE TABLE Family_Member (
    userid INT AUTO_INCREMENT NOT NULL,
    username VARCHAR(50) NOT NULL,
    education_level VARCHAR(50),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES UserProfile(userid, username)
);



-- Create Health Care Professional Table
CREATE TABLE Health_Care_Prof (
    userid INT AUTO_INCREMENT NOT NULL,
    username VARCHAR(50) NOT NULL,
    years_of_exp INT NOT NULL,
    workplace VARCHAR(100),
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES UserProfile(userid, username)
);

-- Create Patient Table
CREATE TABLE Patient (
    userid INT AUTO_INCREMENT NOT NULL,
    username VARCHAR(50) NOT NULL,
    PRIMARY KEY (userid, username),
    FOREIGN KEY (userid, username) REFERENCES UserProfile(userid, username)
);

-- Create Reading Table
CREATE TABLE Reading (
    reading_id VARCHAR(50) NOT NULL,
    readingdate DATE NOT NULL,
    systolic INT NOT NULL,
    diastolic INT NOT NULL,
    PRIMARY KEY (reading_id)
);



-- Create Message Table
CREATE TABLE Message (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    healthcare_prof_userid INT NOT NULL,
    healthcare_prof_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    message_date DATETIME NOT NULL,
    message_content TEXT NOT NULL,
    FOREIGN KEY (healthcare_prof_userid, healthcare_prof_username) REFERENCES Health_Care_Prof(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES Patient(userid, username)
);


-- Create monitor Table
CREATE TABLE Monitor (
    monitor_id INT AUTO_INCREMENT PRIMARY KEY,
    healthcare_prof_userid INT NOT NULL,
    healthcare_prof_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    start_date DATETIME NOT NULL,
    end_date DATETIME NOT NULL,
    FOREIGN KEY (healthcare_prof_userid, healthcare_prof_username) REFERENCES Health_Care_Prof(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES Patient(userid, username)
);




-- Create Communicate Table
CREATE TABLE communicate(
    communicate_id INT AUTO_INCREMENT PRIMARY KEY,
    family_member_userid INT NOT NULL,
    family_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    message_date DATETIME NOT NULL,
    message_content TEXT NOT NULL,
    FOREIGN KEY (family_member_userid, family_username) REFERENCES Family_Member(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES Patient(userid, username)

);

-- Create support Table
CREATE TABLE support(
    support_id INT AUTO_INCREMENT PRIMARY KEY,
    family_member_userid INT NOT NULL,
    family_username VARCHAR(50) NOT NULL,
    patient_userid INT NOT NULL,
    patient_username VARCHAR(50) NOT NULL,
    start_date DATETIME NOT NULL,
    end_date DATETIME,
    relation_to_patient VARCHAR(50),
    FOREIGN KEY (family_member_userid, family_username) REFERENCES Family_Member(userid, username),
    FOREIGN KEY (patient_userid, patient_username) REFERENCES Patient(userid, username)

);



